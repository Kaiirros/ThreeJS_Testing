import {
  DotScreenShader
} from "./chunk-LFBMWHBD.js";
import {
  FullScreenQuad,
  Pass
} from "./chunk-2SDBYJ3P.js";
import {
  ShaderMaterial,
  UniformsUtils
} from "./chunk-BQYUDMOM.js";

// node_modules/three/examples/jsm/postprocessing/DotScreenPass.js
var DotScreenPass = class extends Pass {
  constructor(center, angle, scale) {
    super();
    const shader = DotScreenShader;
    this.uniforms = UniformsUtils.clone(shader.uniforms);
    if (center !== void 0)
      this.uniforms["center"].value.copy(center);
    if (angle !== void 0)
      this.uniforms["angle"].value = angle;
    if (scale !== void 0)
      this.uniforms["scale"].value = scale;
    this.material = new ShaderMaterial({
      name: shader.name,
      uniforms: this.uniforms,
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader
    });
    this.fsQuad = new FullScreenQuad(this.material);
  }
  render(renderer, writeBuffer, readBuffer) {
    this.uniforms["tDiffuse"].value = readBuffer.texture;
    this.uniforms["tSize"].value.set(readBuffer.width, readBuffer.height);
    if (this.renderToScreen) {
      renderer.setRenderTarget(null);
      this.fsQuad.render(renderer);
    } else {
      renderer.setRenderTarget(writeBuffer);
      if (this.clear)
        renderer.clear();
      this.fsQuad.render(renderer);
    }
  }
  dispose() {
    this.material.dispose();
    this.fsQuad.dispose();
  }
};
export {
  DotScreenPass
};
//# sourceMappingURL=three_addons_postprocessing_DotScreenPass__js.js.map
